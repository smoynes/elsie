// Code generated by "stringer -type=Opcode,GPR,Privilege,Priority,offset,literal,vector -output=strings_gen.go -linecomment"; DO NOT EDIT.

package cpu

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpcodeBR-0]
	_ = x[OpcodeNOT-9]
	_ = x[OpcodeAND-5]
	_ = x[OpcodeADD-1]
	_ = x[OpcodeLD-2]
	_ = x[OpcodeLDI-10]
	_ = x[OpcodeLEA-14]
	_ = x[OpcodeST-3]
	_ = x[OpcodeJMP-12]
	_ = x[OpcodeRET-255]
	_ = x[OpcodeJSR-4]
	_ = x[OpcodeJSRR-254]
	_ = x[OpcodeTRAP-15]
	_ = x[OpcodeReserved-13]
	_ = x[OpcodeRTI-8]
	_ = x[OpcodeSTI-11]
	_ = x[OpcodeSTR-7]
}

const (
	_Opcode_name_0 = "BRADDLDSTJSRAND"
	_Opcode_name_1 = "STRRTINOTLDISTIJMPRESVLEATRAP"
	_Opcode_name_2 = "JSRRRET"
)

var (
	_Opcode_index_0 = [...]uint8{0, 2, 5, 7, 9, 12, 15}
	_Opcode_index_1 = [...]uint8{0, 3, 6, 9, 12, 15, 18, 22, 25, 29}
	_Opcode_index_2 = [...]uint8{0, 4, 7}
)

func (i Opcode) String() string {
	switch {
	case i <= 5:
		return _Opcode_name_0[_Opcode_index_0[i]:_Opcode_index_0[i+1]]
	case 7 <= i && i <= 15:
		i -= 7
		return _Opcode_name_1[_Opcode_index_1[i]:_Opcode_index_1[i+1]]
	case 254 <= i && i <= 255:
		i -= 254
		return _Opcode_name_2[_Opcode_index_2[i]:_Opcode_index_2[i+1]]
	default:
		return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[R0-0]
	_ = x[R1-1]
	_ = x[R2-2]
	_ = x[R3-3]
	_ = x[R4-4]
	_ = x[R5-5]
	_ = x[R6-6]
	_ = x[R7-7]
	_ = x[NumGPR-8]
}

const _GPR_name = "R0R1R2R3R4R5R6R7NumGPR"

var _GPR_index = [...]uint8{0, 2, 4, 6, 8, 10, 12, 14, 16, 22}

func (i GPR) String() string {
	if i >= GPR(len(_GPR_index)-1) {
		return "GPR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _GPR_name[_GPR_index[i]:_GPR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PrivilegeSystem-0]
	_ = x[PrivilegeUser-1]
}

const _Privilege_name = "SystemUser"

var _Privilege_index = [...]uint8{0, 6, 10}

func (i Privilege) String() string {
	if i >= Privilege(len(_Privilege_index)-1) {
		return "Privilege(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Privilege_name[_Privilege_index[i]:_Privilege_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PriorityLow-0]
	_ = x[PriorityNormal-3]
	_ = x[PriorityHigh-7]
}

const (
	_Priority_name_0 = "LOW"
	_Priority_name_1 = "NORM"
	_Priority_name_2 = "HIGH"
)

func (i Priority) String() string {
	switch {
	case i == 0:
		return _Priority_name_0
	case i == 3:
		return _Priority_name_1
	case i == 7:
		return _Priority_name_2
	default:
		return "Priority(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PCOFFSET11-11]
	_ = x[PCOFFSET9-9]
	_ = x[PCOFFSET5-5]
}

const (
	_offset_name_0 = "PCOFFSET5"
	_offset_name_1 = "PCOFFSET9"
	_offset_name_2 = "PCOFFSET11"
)

func (i offset) String() string {
	switch {
	case i == 5:
		return _offset_name_0
	case i == 9:
		return _offset_name_1
	case i == 11:
		return _offset_name_2
	default:
		return "offset(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMM5-5]
}

const _literal_name = "IMM5"

var _literal_index = [...]uint8{0, 4}

func (i literal) String() string {
	i -= 5
	if i >= literal(len(_literal_index)-1) {
		return "literal(" + strconv.FormatInt(int64(i+5), 10) + ")"
	}
	return _literal_name[_literal_index[i]:_literal_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VECTOR8-8]
}

const _vector_name = "VECTOR8"

var _vector_index = [...]uint8{0, 7}

func (i vector) String() string {
	i -= 8
	if i >= vector(len(_vector_index)-1) {
		return "vector(" + strconv.FormatInt(int64(i+8), 10) + ")"
	}
	return _vector_name[_vector_index[i]:_vector_index[i+1]]
}
