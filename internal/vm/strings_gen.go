// Code generated by "stringer -type=Opcode,GPR,Privilege,Priority,offset,literal,vector -output=strings_gen.go -linecomment"; DO NOT EDIT.

package vm

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BR-0]
	_ = x[ADD-4096]
	_ = x[LD-8192]
	_ = x[ST-12288]
	_ = x[JSR-16384]
	_ = x[AND-20480]
	_ = x[LDR-24576]
	_ = x[STR-28672]
	_ = x[RTI-32768]
	_ = x[NOT-36864]
	_ = x[LDI-40960]
	_ = x[STI-45056]
	_ = x[JMP-49152]
	_ = x[RESV-53248]
	_ = x[LEA-57344]
	_ = x[TRAP-61440]
	_ = x[JSRR-20224]
	_ = x[RET-52992]
}

const _Opcode_name = "BRADDLDSTJSRJSRRANDLDRSTRRTINOTLDISTIJMPRETRESVLEATRAP"

var _Opcode_map = map[Opcode]string{
	0:     _Opcode_name[0:2],
	4096:  _Opcode_name[2:5],
	8192:  _Opcode_name[5:7],
	12288: _Opcode_name[7:9],
	16384: _Opcode_name[9:12],
	20224: _Opcode_name[12:16],
	20480: _Opcode_name[16:19],
	24576: _Opcode_name[19:22],
	28672: _Opcode_name[22:25],
	32768: _Opcode_name[25:28],
	36864: _Opcode_name[28:31],
	40960: _Opcode_name[31:34],
	45056: _Opcode_name[34:37],
	49152: _Opcode_name[37:40],
	52992: _Opcode_name[40:43],
	53248: _Opcode_name[43:47],
	57344: _Opcode_name[47:50],
	61440: _Opcode_name[50:54],
}

func (i Opcode) String() string {
	if str, ok := _Opcode_map[i]; ok {
		return str
	}
	return "Opcode(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[R0-0]
	_ = x[R1-1]
	_ = x[R2-2]
	_ = x[R3-3]
	_ = x[R4-4]
	_ = x[R5-5]
	_ = x[R6-6]
	_ = x[R7-7]
	_ = x[NumGPR-8]
	_ = x[RETP-7]
	_ = x[SP-6]
}

const _GPR_name = "R0R1R2R3R4R5R6R7NumGPR"

var _GPR_index = [...]uint8{0, 2, 4, 6, 8, 10, 12, 14, 16, 22}

func (i GPR) String() string {
	if i >= GPR(len(_GPR_index)-1) {
		return "GPR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _GPR_name[_GPR_index[i]:_GPR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PrivilegeSystem-0]
	_ = x[PrivilegeUser-1]
}

const _Privilege_name = "SystemUser"

var _Privilege_index = [...]uint8{0, 6, 10}

func (i Privilege) String() string {
	if i >= Privilege(len(_Privilege_index)-1) {
		return "Privilege(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Privilege_name[_Privilege_index[i]:_Privilege_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PL0-0]
	_ = x[PL1-1]
	_ = x[PL2-2]
	_ = x[PL3-3]
	_ = x[PL4-4]
	_ = x[PL5-5]
	_ = x[PL6-6]
	_ = x[PL7-7]
	_ = x[PriorityLOW-0]
	_ = x[PriorityNormal-3]
	_ = x[PriorityHigh-7]
}

const _Priority_name = "PL0PL1PL2PL3PL4PL5PL6PL7"

var _Priority_index = [...]uint8{0, 3, 6, 9, 12, 15, 18, 21, 24}

func (i Priority) String() string {
	if i >= Priority(len(_Priority_index)-1) {
		return "Priority(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Priority_name[_Priority_index[i]:_Priority_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OFFSET11-11]
	_ = x[OFFSET9-9]
	_ = x[OFFSET6-6]
	_ = x[OFFSET5-5]
}

const (
	_offset_name_0 = "OFFSET5OFFSET6"
	_offset_name_1 = "OFFSET9"
	_offset_name_2 = "OFFSET11"
)

var (
	_offset_index_0 = [...]uint8{0, 7, 14}
)

func (i offset) String() string {
	switch {
	case 5 <= i && i <= 6:
		i -= 5
		return _offset_name_0[_offset_index_0[i]:_offset_index_0[i+1]]
	case i == 9:
		return _offset_name_1
	case i == 11:
		return _offset_name_2
	default:
		return "offset(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMM5-5]
}

const _literal_name = "IMM5"

var _literal_index = [...]uint8{0, 4}

func (i literal) String() string {
	i -= 5
	if i >= literal(len(_literal_index)-1) {
		return "literal(" + strconv.FormatInt(int64(i+5), 10) + ")"
	}
	return _literal_name[_literal_index[i]:_literal_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VECTOR8-8]
}

const _vector_name = "VECTOR8"

var _vector_index = [...]uint8{0, 7}

func (i vector) String() string {
	i -= 8
	if i >= vector(len(_vector_index)-1) {
		return "vector(" + strconv.FormatInt(int64(i+8), 10) + ")"
	}
	return _vector_name[_vector_index[i]:_vector_index[i+1]]
}
